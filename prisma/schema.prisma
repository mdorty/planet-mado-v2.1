generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String               @id @default(uuid())
  username    String               @unique
  email       String               @unique
  password    String
  role        String               @default("user")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  accounts    Account[]            @relation("UserToAccount")
  characters  Character[]
  resetTokens PasswordResetToken[]
  sessions    Session[]            @relation("UserToSession")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation("UserToAccount", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation("UserToSession", fields: [userId], references: [id], onDelete: Cascade)
}

model Character {
  id                  String    @id @default(uuid())
  userId              String
  name                String
  level               Int       @default(1)
  health              Int       @default(100)
  energy              Int       @default(50)
  strength            Int       @default(10)
  speed               Int       @default(10)
  currentPowerlevel   Int       @default(1000)
  hiddenPowerlevel    Int?      @default(0)
  basePowerlevel      Int       @default(1000)
  race                String    @default("Unknown")
  planet              String?
  alignment           Int       @default(0)
  description         String?
  equippedItems       String?   @default("None")
  items               String?   @default("None")
  peopleYouHaveBeenTo String?   @default("None")
  jobs                String?
  died                DateTime?
  deathCount          Int?      @default(0)
  lastDateTrained     DateTime?
  lastDateMeditated   DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  battles             Battle[]  @relation("CharacterToBattle")
  user                User      @relation(fields: [userId], references: [id])
  itemsOwned          Item[]    @relation("CharacterToItem")
  moves               Move[]
}

model Move {
  id                   String    @id @default(uuid())
  characterId          String
  name                 String
  category             String
  description          String
  percentDamage        Int?
  percentCost          Int?
  chargeable           Boolean?  @default(false)
  stunTurns            Int?
  stunChancePercent    Int?
  powerlevelMultiplier Float?
  createdAt            DateTime  @default(now())
  character            Character @relation(fields: [characterId], references: [id])
}

model Item {
  id          String    @id @default(uuid())
  characterId String
  name        String
  type        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  character   Character @relation("CharacterToItem", fields: [characterId], references: [id], onDelete: Cascade)
}

model Battle {
  id          String    @id @default(uuid())
  characterId String
  opponentId  String?
  outcome     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  character   Character @relation("CharacterToBattle", fields: [characterId], references: [id], onDelete: Cascade)
}

model Map {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  xCoord      Int?
  yCoord      Int?
  tileImage   String?
  createdAt   DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
