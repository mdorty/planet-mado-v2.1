generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String               @id @default(uuid())
  username    String               @unique
  email       String               @unique
  password    String
  role        String               @default("user")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  accounts    Account[]            @relation("UserToAccount")
  characters  Character[]
  resetTokens PasswordResetToken[]
  sessions    Session[]            @relation("UserToSession")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation("UserToAccount", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation("UserToSession", fields: [userId], references: [id], onDelete: Cascade)
}

model Character {
  id                 String   @id @default(cuid())
  userId             String
  name               String
  status             String   @default("active")  
  level              Int      @default(1)
  health             Int      @default(100)
  energy             Int      @default(50)
  strength           Int      @default(10)
  speed              Int      @default(10)
  currentPowerlevel  Int      @default(1000)
  hiddenPowerlevel   Int?     @default(0)
  basePowerlevel     Int      @default(1000)
  race               String   @default("Unknown")
  planet             String?
  alignment          Int      @default(0)
  description        String?
  equippedItems      String?  @default("None")
  items              String?  @default("None")
  peopleYouHaveBeenTo String? @default("None")
  jobs               String?
  died               DateTime?
  deathCount         Int?     @default(0)
  lastDateTrained    DateTime?
  lastDateMeditated  DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
  currentMap         String   @default("Unknown") 
  xCoord             Int      @default(1) 
  yCoord             Int      @default(1) 
  battles            Battle[] @relation("CharacterToBattle")
  itemsOwned         Item[]   @relation("CharacterToItem")
  moves              Move[]
  inventory          InventoryItem[] @relation("CharacterToInventory")

  @@index([userId], name: "character_userId_idx")
  @@index([currentPowerlevel], name: "character_powerlevel_idx")
  @@index([race], name: "character_race_idx")
}

model Move {
  id                   String    @id @default(uuid())
  characterId          String
  name                 String
  category             String
  description          String
  percentDamage        Int?
  percentCost          Int?
  chargeable           Boolean?  @default(false)
  stunTurns            Int?
  stunChancePercent    Int?
  powerlevelMultiplier Float?
  createdAt            DateTime  @default(now())
  character            Character @relation(fields: [characterId], references: [id])
  
  @@index([characterId], name: "move_characterId_idx")
  @@index([category], name: "move_category_idx")
}

model Item {
  id          String    @id @default(uuid())
  characterId String
  name        String
  type        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  character   Character @relation("CharacterToItem", fields: [characterId], references: [id], onDelete: Cascade)
}

model ItemTemplate {
  id          Int     @id @default(autoincrement())
  name        String
  type        String
  description String?
  image       String?
  effect      String?
  value       Int     @default(0)
  durability  Int     @default(100)
  stackable   Boolean @default(false)
  maxStackSize Int    @default(1)
  usableInBattle Boolean @default(false)
  equipmentSlot String? 
  lootChance   Float   @default(0.0)
  // Relations
  inventories InventoryItem[]
  
  @@index([type], name: "item_type_idx")
  @@index([name], name: "item_name_idx")
}

model InventoryItem {
  id          Int         @id @default(autoincrement())
  character   Character?  @relation("CharacterToInventory", fields: [characterId], references: [id])
  characterId String?
  item        ItemTemplate @relation(fields: [itemId], references: [id])
  itemId      Int
  quantity    Int         @default(1)
  equipped    Boolean     @default(false)
  
  @@index([characterId], name: "inventory_characterId_idx")
  @@index([itemId], name: "inventory_itemId_idx")
  @@index([equipped], name: "inventory_equipped_idx")
}

model Battle {
  id          String    @id @default(uuid())
  characterId String
  opponentId  String?
  outcome     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  character   Character @relation("CharacterToBattle", fields: [characterId], references: [id], onDelete: Cascade)
}

model Map {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  xCoord      Int?
  yCoord      Int?
  tileImage   String?
  createdAt   DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
